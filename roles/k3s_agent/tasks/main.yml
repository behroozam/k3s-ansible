---
- name: Set dynamic facts for init system
  ansible.builtin.set_fact:
    is_systemd: "{{ ansible_service_mgr == 'systemd' }}"
    is_openrc: "{{ ansible_service_mgr == 'openrc' }}"
    k3s_env_file: "{{ systemd_dir + '/k3s-agent.service.env' if ansible_service_mgr == 'systemd' else k3s_env_dir + '/k3s-agent.env' }}"
    k3s_service_file_path: "{{ systemd_dir + '/k3s-agent.service' if ansible_service_mgr == 'systemd' else openrc_dir + '/k3s-agent' }}"
    k3s_service_template: "{{ 'k3s-agent.service.j2' if ansible_service_mgr == 'systemd' else 'k3s-agent.openrc.j2' }}"


- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: not ansible_check_mode and k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

# If airgapped, all K3s artifacts are already on the node.
# We should be downloading and installing the newer version only if we are in one of the following cases :
#   - we couldn't get k3s installed version in the first task of this role
#   - the installed version of K3s on the nodes is older than the requested version in ansible vars
- name: Download artifact only if needed
  when: not ansible_check_mode and airgap_dir is undefined and
        (k3s_version_output.rc != 0 or installed_k3s_version is version(k3s_version, '<'))
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
        INSTALL_K3S_EXEC: "agent"
      changed_when: true
      notify: 
        - restart k3s service (OpenRc)
        - restart k3s service (systemd)

- name: Setup optional config file
  when: agent_config_yaml is defined
  block:
    - name: Make config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory
    - name: Copy config values
      ansible.builtin.copy:
        content: "{{ agent_config_yaml }}"
        dest: "/etc/rancher/k3s/config.yaml"
        mode: "0644"
      register: _agent_config_result
      notify: 
        - restart k3s service (OpenRc)
        - restart k3s service (systemd)

- name: Get the token from the first server
  ansible.builtin.set_fact:
    token: "{{ hostvars[groups[server_group][0]].token }}"

- name: Delete existing token if different
  ansible.builtin.lineinfile:
    state: absent
    path: "{{ k3s_env_file }}"
    regexp: "^K3S_TOKEN=\\s*(?!{{ token }}\\s*$)"

- name: Add K3s token to environment file
  no_log: false
  ansible.builtin.lineinfile:
    path: "{{ k3s_env_file }}"
    line: "K3S_TOKEN={{ token }}"
  notify: 
    - restart k3s service (OpenRc)
    - restart k3s service (systemd)
- name: Copy K3s service file
  ansible.builtin.template:
    src: "{{ k3s_service_template }}"
    dest: "{{ k3s_service_file_path }}"
    owner: root
    group: root
    mode: "0754"
  notify: 
    - restart k3s service (OpenRc)
    - restart k3s service (systemd)

- name: Enable and start K3s agent
  ansible.builtin.service:
    name: k3s-agent
    enabled: true
    state: started